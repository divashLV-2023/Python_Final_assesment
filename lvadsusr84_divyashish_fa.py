# -*- coding: utf-8 -*-
"""LVADSUSR84-Divyashish-FA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PaFcS6DM-uqka15M-MOg7LEnwd9_GzYb
"""

import pandas as pd
import numpy as np
#1
df = pd.read_csv('/content/Walmart_Dataset Python_Final_Assessment1.csv')

#1
print("Number of rows: ", df.shape[0])
print("Number of columns: ", df.shape[1])

print("Data types:")
print(df.dtypes)

print("\nFirst 5 rows:")
print(df.head())

print("\nSummary statistics:")
print(df.describe())

print("\nMissing values:")
print(df.isnull().sum())

#2
print("Missing values:")
print(df.isnull().sum())

print("Number of duplicates: ", df.duplicated().sum())

df.drop_duplicates(inplace=True)

#3
numerical_data = ['Sales', 'Quantity', 'Profit']

for feature in numerical_data:
    print(f"{feature} - mean: {df[feature].mean()}, median: {df[feature].median()}, mode: {df[feature].mode().values[0]}")

print(f"Range - Sales: {df['Sales'].max() - df['Sales'].min()}")
print(f"Range - Quantity: {df['Quantity'].max() - df['Quantity'].min()}")
print(f"Range - Profit: {df['Profit'].max() - df['Profit'].min()}")

print(f"Variance - Sales: {df['Sales'].var()}")
print(f"Standard Deviation - Sales: {df['Sales'].std()}")

print(f"Variance - Quantity: {df['Quantity'].var()}")
print(f"Standard Deviation - Quantity: {df['Quantity'].std()}")

print(f"Variance - Profit: {df['Profit'].var()}")
print(f"Standard Deviation - Profit: {df['Profit'].std()}")

#4
import seaborn as sns
import matplotlib.pyplot as plt

g = sns.FacetGrid(df, col='Category', col_wrap=3, height=2.5, aspect=1.5)

g.map(sns.histplot, "Sales", kde=True, color='purple')
g.map(sns.histplot, "Quantity", kde=True, color='green')
g.map(sns.histplot, "Profit", kde=True, color='orange')

g.fig.set_size_inches(15, 15)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

g = sns.FacetGrid(df, col='Category', col_wrap=3, height=2.5, aspect=1.5)

g.map(sns.scatterplot, "Sales", "Quantity", color='purple')
g.map(sns.scatterplot, "Sales", "Profit", color='green')
g.map(sns.scatterplot, "Quantity", "Profit", color='orange')

g.fig.set_size_inches(15, 15)
plt.show()

fig, ax = plt.subplots(figsize=(16, 10))
sns.boxplot(x='Category', y='Sales', data=df, ax=ax)
plt.show()

fig, ax = plt.subplots(figsize=(16, 5))
sns.boxplot(x='Category', y='Quantity', data=df, ax=ax)
plt.show()

fig, ax = plt.subplots(figsize=(16, 10))
sns.boxplot(x='Category', y='Profit', data=df, ax=ax)
plt.show()

sns.set(style="whitegrid")

fig, axes = plt.subplots(1, 2, figsize=(35, 10))

sns.countplot(x='Category', data=df, ax=axes[0])
sns.countplot(x='Geography', data=df, ax=axes[1])

plt.show()

plt.pie(df['Category'].value_counts(), labels=df['Category'].value_counts().index, autopct='%1.1f%%')
plt.axis('equal')
plt.show()

#5

corr_matrix = df[['Sales', 'Quantity', 'Profit']].corr()

print(corr_matrix)


plt.figure(figsize=(3, 3))
sns.heatmap(corr_matrix, annot=True, cmap='Pastel1')
plt.title('Correlation Matrix')
plt.show()

#6

sns.scatterplot(x=df['Sales'], y=df['Quantity'])
plt.title('Scatter Plot of Sales vs Quantity')
plt.xlabel('Sales')
plt.ylabel('Quantity')
plt.show()

#7
#trend analysis
#i
df['Order Month'] = pd.to_datetime(df['Order Date']).dt.month
salesData = df.groupby('Year')['Sales'].sum()
salesData.plot(label='Sales')
profitData = df.groupby('Year')['Profit'].sum()
profitData.plot(label='Profit')
plt.grid(True)
plt.legend()
plt.show()

salesData = df.groupby('Order Month')['Sales'].sum()
salesData.plot(label='Sales')
profitData = df.groupby('Order Month')['Profit'].sum()
profitData.plot(label='Profit')
plt.grid(True)
plt.legend()
plt.show()

"""As you can see there is a hike in sales after 2012 and also a growth in profit from 2013, as for the monthly analysis both achived their high point in march and hit a dip in july. the relationship looks healthy as both move corespondingly"""

#ii
total_sales = df.groupby(['Year', 'Category'])['Sales'].sum().reset_index()
total_sales['Growth'] = total_sales.groupby('Category')['Sales'].pct_change() * 100
most_growth_category = total_sales.groupby('Category')['Growth'].mean().idxmax()
print("Category with the Most Growth in Sales:", most_growth_category)

#Customer analysis
#i
customer_summary = df.groupby('EmailID').agg({'Order ID': 'nunique', 'Sales': 'sum'}).reset_index()
customer_summary.columns = ['EmailID', 'Quantity', 'TotalSales']

top_customers_by_orders = customer_summary.nlargest(5, 'Quantity')
top_customers_by_sales = customer_summary.nlargest(5, 'TotalSales')

print("Top 5 Customers by Orders Placed:")
print(top_customers_by_orders.set_index('EmailID'))
print("\nTop 5 Customers by Total Sales:")
print(top_customers_by_sales.set_index('EmailID'))

"""i)customers tend to spend high amount in less number of products collectivly, and they buy more products for a cheaper amount ."""

#ii)
df['OrderDate'] = pd.to_datetime(df['Order Date'])
df.sort_values(by=['EmailID', 'Order Date'], inplace=True)
df['TimeBetweenOrders'] = df.groupby('EmailID')['Order Date'].diff()
average_time_between_orders = df.groupby('EmailID')['TimeBetweenOrders'].mean()

print("Average Time Between Orders for Each Customer:")
print(average_time_between_orders)
print(average_time_between_orders.mean())

#Comprehensive Analysis
#i#average Time between order and delivery
df['TimeBetweenOrderAndDelivery'] = df['Ship Date'] - df['Order Date']
average_time_between_order_and_delivery = df.groupby('Category')['TimeBetweenOrderAndDelivery'].mean()
print(average_time_between_order_and_delivery)

df['TimeBetweenOrderAndDelivery'] = df['Ship Date'] - df['Order Date']
average_time_between_order_and_delivery = df.groupby('EmailID')['TimeBetweenOrderAndDelivery'].mean()
print(average_time_between_order_and_delivery.mean())

"""i)There is a huge gap of arround 9 days for the delivery this could be a problem in the future and we can find a way to increase the production and decrese the time taken, for example to hire more number of transpotation ."""

#ii
customer_order_amounts = df.groupby('EmailID')['Sales'].sum().reset_index()

top_10_percent = int(len(customer_order_amounts) * 0.1)
high_value_customers = customer_order_amounts.nlargest(top_10_percent, 'Sales')
print(high_value_customers)

customer_order_amounts = df.groupby('EmailID')['Quantity'].sum().reset_index()

top_10_percent = int(len(customer_order_amounts) * 0.1)
high_value_customers = customer_order_amounts.nlargest(top_10_percent, 'Quantity')
print(high_value_customers)

for index, customer in high_value_customers.iterrows():
  pass
  #We can write a function to send promotional offers to these value customers

"""ii) The number sales depends on few factors such as income, age and few more.so to make an improvement in here is to find few marketing strategies such as promotions, offers, discounts, and making few improvements for seasonal events like festivels or something these can make customer want to buy more and enhancing the customer experience is key for growth

iii)Finding of highvalue customer with number of products brought, time length of being a customer or such. Giving these customers more store credit or some kind of rewards will boost the relationship and then they might recomend the products and the experience with their closed ones who can turn out to be a potential customer
"""

